#include <GL/gl.h>
#include <GL/glut.h>
#include <math.h>

int frameNumber = 0;

void drawShip() {
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_POLYGON);
    glVertex2f(1.0f, 5);
    glVertex2f(-2.0f, 4.5);
    glVertex2f(1.0f, 4);
    glEnd();

    glBegin(GL_LINES);
    glVertex2f(1.0f, 2);
    glVertex2f(1.0f, 4);
    glEnd();

    glColor3f(0.0, 0.0, 1.0);
    glBegin(GL_POLYGON);
    glVertex2f(-2.0f, 0);
    glVertex2f(2.0f, 0);
    glVertex2f(3.0f, 2);
    glVertex2f(-3.0f, 2);
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();

    // Draw Ship
    glPushMatrix();
    glTranslated(-3 + 15 * (frameNumber % 300) / 300.0, 0, 0);
    glScaled(0.3, 0.3, 1);
    drawShip();
    glPopMatrix();

    glutSwapBuffers();
}

void doFrame(int v) {
    frameNumber++;
    glutPostRedisplay();
    glutTimerFunc(30, doFrame, 0);
}

void init() {
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-5, 5, -5, 5, -1, 1);
    glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(700, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Simple Ship Animation");

    init();

    glutDisplayFunc(display);
    glutTimerFunc(0, doFrame, 0);

    glutMainLoop();
    return 0;
}
